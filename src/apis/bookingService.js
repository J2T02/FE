import axiosClients from "./axiosClients";

const booking = async (payload) => {
  return new Promise((resolve) => {
    console.log("üì§ T·∫°o Booking:", payload);

    setTimeout(() => {
      resolve({
        data: {
          success: true,
          message: "T·∫°o booking th√†nh c√¥ng",
          data: {
            bookingId: "bk123",
            ...payload,
          },
        },
      });
    }, 1000);
  });
};
export { booking };

// api/bookingApi.js (ho·∫∑c api/bookingApi.jsx)

import { message } from "antd"; // Import message for notifications
import dayjs from "dayjs"; // Import dayjs if you use it for date formatting in mock data

// Dummy Data - Replace with actual API calls
// This data structure now reflects the database schema more closely
const dummyBookings = [
  {
    bookingId: 1,
    accId: 101,
    fullName: "Nguy·ªÖn VƒÉn A",
    phone: "0912345678",
    docId: 1,
    doctorName: "BS. Tr·∫ßn Th·ªã B",
    dsId: 1001,
    status: 1, // 1: Confirmed
    createAt: "2025-06-20T10:00:00Z",
    workDate: "2025-06-23", // Today
    slotTime: "09:00 - 09:30",
    note: "Kh√°ch h√†ng y√™u c·∫ßu t∆∞ v·∫•n k·ªπ v·ªÅ IVF.",
    amount: "2.400.000 VND",
  },
  {
    bookingId: 2,
    accId: 102,
    fullName: "Tr·∫ßn Th·ªã C",
    phone: "0912345679",
    docId: 2,
    doctorName: "BS. L√™ VƒÉn D",
    dsId: 1002,
    status: 5, // 5: ƒêang kh√°m
    createAt: "2025-06-19T11:30:00Z",
    workDate: "2025-06-23", // Today
    slotTime: "10:00 - 10:30",
    note: "T√°i kh√°m ƒë·ªãnh k·ª≥.",
    amount: "800.000 VND",
  },
  {
    bookingId: 3,
    accId: 103,
    fullName: "L√™ VƒÉn E",
    phone: "0912345680",
    docId: 1,
    doctorName: "BS. Tr·∫ßn Th·ªã B",
    dsId: 1003,
    status: 1,
    createAt: "2025-06-21T14:00:00Z",
    workDate: "2025-06-24", // Tomorrow
    slotTime: "14:00 - 14:30",
    note: "Kh√°m s·ª©c kh·ªèe t·ªïng qu√°t.",
    amount: "1.200.000 VND",
  },
  {
    bookingId: 4,
    accId: 104,
    fullName: "Ph·∫°m Th·ªã G",
    phone: "0912345681",
    docId: 3,
    doctorName: "BS. Nguy·ªÖn Th·ªã H",
    dsId: 1004,
    status: 3, // 3: ƒê√£ Check-out
    createAt: "2025-06-18T09:00:00Z",
    workDate: "2025-06-22",
    slotTime: "09:00 - 09:30",
    note: "ƒê√£ ho√†n th√†nh kh√°m v√† t∆∞ v·∫•n.",
    amount: "1.500.000 VND",
  },
  {
    bookingId: 5,
    accId: 105,
    fullName: "Ho√†ng VƒÉn K",
    phone: "0912345682",
    docId: 2,
    doctorName: "BS. L√™ VƒÉn D",
    dsId: 1005,
    status: 4, // 4: ƒê√£ h·ªßy
    createAt: "2025-06-17T16:00:00Z",
    workDate: "2025-06-24",
    slotTime: "16:00 - 16:30",
    note: "Kh√°ch h√†ng ƒë√£ h·ªßy v√¨ l√Ω do c√° nh√¢n.",
    amount: "1.000.000 VND",
  },
  {
    bookingId: 6,
    accId: 106,
    fullName: "ƒê·∫∑ng Th·ªã L",
    phone: "0987654321",
    docId: 1,
    doctorName: "BS. Tr·∫ßn Th·ªã B",
    dsId: 1006,
    status: 1,
    createAt: "2025-06-22T08:00:00Z",
    workDate: "2025-06-23", // Today
    slotTime: "11:00 - 11:30",
    note: "Kh√°m l·∫ßn ƒë·∫ßu.",
    amount: "900.000 VND",
  },
];

// A mutable copy for mock updates
const mockDatabase = [...dummyBookings];

// Mock API: Fetch all bookings (simulate GET request)
export const fetchAllBookingsApi = async () => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(mockDatabase);
    }, 500); // Simulate network delay
  });
};

// Mock API: Update booking status (simulate POST/PUT request)
export const updateBookingStatusApi = async (
  bookingId,
  newStatusId,
  note = null
) => {
  console.log(
    `Mock API Call: Updating booking ${bookingId} to status ${newStatusId} with note: ${note}`
  );
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const index = mockDatabase.findIndex((b) => b.bookingId === bookingId);
      if (index > -1) {
        mockDatabase[index] = {
          ...mockDatabase[index],
          status: newStatusId,
          note: note ? note : mockDatabase[index].note, // Update note if provided
        };
        // In a real app, you might not show a message here, but handle it in the component
        // message.success(`C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªãch h·∫πn ${bookingId} th√†nh c√¥ng!`);
        resolve({ success: true, updatedBooking: mockDatabase[index] });
      } else {
        // message.error(`Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn ${bookingId}.`);
        reject({ success: false, message: `Booking ${bookingId} not found.` });
      }
    }, 1000); // Simulate network delay
  });
};

// H√†m c√≥ th·ªÉ d√πng cho API th·∫≠t
/*
import axiosClients from '../path/to/your/axiosClients'; // ƒêi·ªÅu ch·ªânh ƒë∆∞·ªùng d·∫´n

export const fetchAllBookingsApi = async () => {
  try {
    const response = await axiosClients.get('/Booking/All'); // Thay th·∫ø b·∫±ng endpoint c·ªßa b·∫°n
    return response.data;
  } catch (error) {
    console.error("Error fetching bookings:", error);
    throw error; // Ho·∫∑c x·ª≠ l√Ω l·ªói theo c√°ch b·∫°n mu·ªën
  }
};

export const updateBookingStatusApi = async (bookingId, newStatusId, note = null) => {
  try {
    const payload = { bookingId, newStatusId, note };
    const response = await axiosClients.post('/Booking/UpdateStatus', payload); // Thay th·∫ø b·∫±ng endpoint c·ªßa b·∫°n
    return response.data; // Server n√™n tr·∫£ v·ªÅ th√¥ng tin l·ªãch h·∫πn ƒë√£ c·∫≠p nh·∫≠t
  } catch (error) {
    console.error("Error updating booking status:", error);
    throw error;
  }
};
*/
