import React, { useEffect, useState } from "react";
import {
  Tag,
  Rate,
  Typography,
  Divider,
  Space,
  Select,
  message,
  Pagination,
  Layout,
  theme,
} from "antd";
import dayjs from "dayjs";
import WorkScheduleManagement from "./WorkScheduleManagement";
import FeedbackCardManagement from "./FeedbackCardManagement";
import Header from "~components/header/Header";
import Footer from "~components/footer/Footer";
import { getDoctorInfo } from "../../../apis/doctorService";
import { GetAllDoctorSchedule } from "../../../apis/bookingService";
import { useParams } from "react-router-dom";
const { Title, Text } = Typography;
const { Option } = Select;

const DoctorDetailManagement = () => {
  const { doctorId } = useParams();
  const { token } = theme.useToken();
  const [doctor, setDoctor] = useState(null);
  const [scheduleData, setScheduleData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [feedbacks, setFeedbacks] = useState([
    {
      fb_ID: 309,
      star: 5,
      content:
        "B√°c sƒ© nh·∫π nh√†ng ƒë·∫øn m·ª©c t√¥i t∆∞·ªüng m√¨nh ƒëang ƒë∆∞·ª£c ch·ªØa l√†nh b·∫±ng t√¢m linh ü§£.",
      createAt: "2025-06-20",
      hus_Name: "Nguy·ªÖn VƒÉn H√πng",
      wife_Name: "Ph·∫°m Th·ªã Mai",
    },
    {
      fb_ID: 310,
      star: 5,
      content:
        "V·ª´a v√†o ƒë√£ th·∫•y b√°c sƒ© c∆∞·ªùi, t√¥i qu√™n lu√¥n l√Ω do m√¨nh ƒë·∫øn kh√°m üòÖ.",
      createAt: "2025-06-21",
      hus_Name: "Tr·∫ßn C√¥ng Minh",
      wife_Name: "Nguy·ªÖn Th·ªã H∆∞·ªùng",
    },
    {
      fb_ID: 311,
      star: 5,
      content:
        "T√¥i b·ªã m·∫•t t·∫≠p trung m·ªói khi b√°c sƒ© n√≥i... n√™n xin ƒë∆∞·ª£c t√°i kh√°m nhi·ªÅu l·∫ßn üòÇ.",
      createAt: "2025-06-22",
      hus_Name: "L√™ VƒÉn Th√°i",
      wife_Name: "V≈© Ng·ªçc H√†",
    },
    {
      fb_ID: 312,
      star: 4,
      content:
        "Kh√°m xong ra ngo√†i m√† v·ª£ t√¥i b·∫£o 'em th·∫•y anh nh√¨n b√°c sƒ© h∆°i l√¢u ƒë·∫•y nha' üôà.",
      createAt: "2025-06-23",
      hus_Name: "Phan VƒÉn Nghƒ©a",
      wife_Name: "L√™ Th·ªã H·ªìng",
    },
    {
      fb_ID: 313,
      star: 5,
      content:
        "L·∫ßn ƒë·∫ßu ti√™n ƒëi b·ªánh vi·ªán m√† th·∫•y nh∆∞... ƒë·∫øn spa! C·∫£m ∆°n b√°c sƒ© r·∫•t nhi·ªÅu!",
      createAt: "2025-06-24",
      hus_Name: "ƒê·ªó M·∫°nh H√πng",
      wife_Name: "ƒê√†o Th·ªã Kim",
    },
    {
      fb_ID: 314,
      star: 5,
      content:
        "Gi·ªçng b√°c sƒ© nh·∫π nh√†ng ƒë·∫øn m·ª©c t√¥i t∆∞·ªüng ƒëang nghe ASMR tr·ªã li·ªáu üòå.",
      createAt: "2025-06-25",
      hus_Name: "B√πi Minh Qu√¢n",
      wife_Name: "Tr·ªãnh Ng·ªçc Anh",
    },
    {
      fb_ID: 315,
      star: 5,
      content:
        "Chuy√™n m√¥n v·ªØng, t√¢m l√Ω t·ªët, ngo·∫°i h√¨nh nh∆∞ idol. Kh√¥ng bi·∫øt ch√™ ch·ªó n√†o!",
      createAt: "2025-06-26",
      hus_Name: "L√Ω ƒê·ª©c Th·ªãnh",
      wife_Name: "T√¥ Th·ªã Tuy·∫øt",
    },
    {
      fb_ID: 316,
      star: 4,
      content:
        "C√≥ l·∫Ω t√¥i c·∫ßn b√°c sƒ© kh√°m tim sau bu·ªïi h√¥m nay‚Ä¶ tim ƒë·∫≠p m·∫°nh qu√°!",
      createAt: "2025-06-26",
      hus_Name: "V≈© H·∫£i ƒêƒÉng",
      wife_Name: "L√™ Nh∆∞ Qu·ª≥nh",
    },
    {
      fb_ID: 317,
      star: 5,
      content: "N·∫øu ƒë∆∞·ª£c ch·ªçn b√°c sƒ© kh√°m c·∫£ ƒë·ªùi, t√¥i ch·ªçn ch·ªã Lan ‚ù§Ô∏è.",
      createAt: "2025-06-26",
      hus_Name: "Ng√¥ B√° Duy",
      wife_Name: "Tr·∫ßn Kim Chi",
    },
  ]);
  const [filteredFeedbacks, setFilteredFeedbacks] = useState([]);
  const [selectedStar, setSelectedStar] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const pageSize = 5;

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        // L·∫•y th√¥ng tin b√°c sƒ©
        const resDoctor = await getDoctorInfo(doctorId);
        console.log(resDoctor);
        if (resDoctor?.data?.success) {
          setDoctor(resDoctor.data.data);
        } else {
          setDoctor(null);
        }
        // L·∫•y l·ªãch l√†m vi·ªác
        const resSchedule = await GetAllDoctorSchedule(doctorId);
        if (resSchedule?.data?.success) {
          setScheduleData(resSchedule.data.data);
        } else {
          setScheduleData([]);
        }
      } catch (err) {
        setDoctor(null);
        setScheduleData([]);
      } finally {
        setLoading(false);
      }
    };
    if (doctorId) fetchData();
  }, [doctorId]);

  useEffect(() => {
    filterFeedbacks(selectedStar);
    setCurrentPage(1);
  }, [selectedStar, feedbacks]);

  const handleStatusChange = async (value) => {
    setDoctor((prev) => ({ ...prev, status: value }));
    message.success("ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i.");
  };

  const handleStarFilter = (value) => {
    setSelectedStar(value);
  };

  const filterFeedbacks = (star) => {
    if (!star) {
      setFilteredFeedbacks(feedbacks);
    } else {
      const filtered = feedbacks.filter((fb) => fb.star === star);
      setFilteredFeedbacks(filtered);
    }
  };

  const paginatedFeedbacks = filteredFeedbacks.slice(
    (currentPage - 1) * pageSize,
    currentPage * pageSize
  );

  // Mapping c√°c tr∆∞·ªùng t·ª´ API v√†o layout c≈©
  // N·∫øu thi·∫øu tr∆∞·ªùng th√¨ mock nh∆∞ c≈©
  const gender = doctor?.gender || "N·ªØ";
  const yob = doctor?.yob || "1988-03-15T00:00:00.000Z";
  const experience = doctor?.experience || 10;
  const edu_LevelName = doctor?.eduInfo?.eduName;
  const full_Name = doctor?.accountInfo?.fullName || "Tr·∫ßn Th·ªã Lan";
  const mail = doctor?.accountInfo?.mail || "lan.bs88@gmail.com";
  const phone = doctor?.accountInfo?.phone || "0908123456";
  const img = doctor?.img || "/femaledoctor.jpg";
  const avgStar = doctor?.avgStar || 4.8;
  const createAt = doctor?.createAt || "2015-07-01T00:00:00.000Z";
  const status = doctor?.status?.statusId || 1;
  const certificates = doctor?.certificateInfo || [];

  return (
    <Layout>
      <Header />
      <div style={{ padding: "24px" }}>
        <Title level={3}>Th√¥ng tin b√°c sƒ©</Title>

        <div style={{ display: "flex", gap: "24px" }}>
          <img
            src={img}
            alt="Doctor"
            style={{
              width: 160,
              height: 160,
              borderRadius: "50%",
              objectFit: "cover",
            }}
          />
          <div>
            <Title level={4}>{full_Name}</Title>
            <Text>{mail}</Text>
            <br />
            <Text>{phone}</Text>
            <br />
            <Rate disabled defaultValue={avgStar || 0} />
          </div>
        </div>

        <Divider />

        <div>
          <p>
            <b>Gi·ªõi t√≠nh:</b> {gender}
          </p>
          <p>
            <b>NƒÉm sinh:</b> {dayjs(yob).format("DD/MM/YYYY")}
          </p>
          <p>
            <b>Tr√¨nh ƒë·ªô:</b>{" "}
            <Tag color="blue">{edu_LevelName ? edu_LevelName : "ch∆∞a r√µ"}</Tag>
          </p>
          <p>
            <b>Kinh nghi·ªám:</b> {experience} nƒÉm
          </p>
          <p>
            <b>Ng√†y b·∫Øt ƒë·∫ßu c√¥ng t√°c:</b> {dayjs(createAt).format("DD/MM/YYYY")}
          </p>

          <div style={{ margin: "8px 0" }}>
            <b>Tr·∫°ng th√°i:</b>{" "}
            <Select
              value={status}
              onChange={handleStatusChange}
              style={{ width: 160 }}
            >
              <Option value={1}>ƒêang c√¥ng t√°c</Option>
              <Option value={2}>ƒêang ngh·ªâ ph√©p</Option>
              <Option value={3}>ƒê√£ ngh·ªâ vi·ªác</Option>
            </Select>
          </div>

          <p>
            <b>Ch·ª©ng ch·ªâ:</b>
          </p>
          <Space wrap>
            {certificates.map((cer, index) => (
              <Tag
                key={index}
                color="purple"
                style={{ cursor: "pointer" }}
                onClick={() => window.open(cer.filePath, "_blank")}
              >
                {cer.cerName}
              </Tag>
            ))}
          </Space>
        </div>

        <Divider />

        <Title level={4}>L·ªãch l√†m vi·ªác trong tu·∫ßn</Title>
        <WorkScheduleManagement doctorId={doctorId} />

        <Divider />

        <div style={{ display: "flex", justifyContent: "space-between" }}>
          <Title level={4}>ƒê√°nh gi√° t·ª´ b·ªánh nh√¢n</Title>
          <Select
            allowClear
            placeholder="L·ªçc theo s·ªë sao"
            value={selectedStar}
            onChange={handleStarFilter}
            style={{ width: 160 }}
          >
            {[5, 4, 3, 2, 1].map((star) => (
              <Option key={star} value={star}>
                {star} sao
              </Option>
            ))}
          </Select>
        </div>

        {paginatedFeedbacks.map((fb) => (
          <FeedbackCardManagement key={fb.fb_ID} data={fb} />
        ))}

        {filteredFeedbacks.length > pageSize && (
          <div style={{ textAlign: "center", marginTop: 16 }}>
            <Pagination
              current={currentPage}
              pageSize={pageSize}
              total={filteredFeedbacks.length}
              onChange={(page) => setCurrentPage(page)}
              showSizeChanger={false}
            />
          </div>
        )}
      </div>
      <Footer />
    </Layout>
  );
};

export default DoctorDetailManagement;
