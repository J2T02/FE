// ... gi·ªØ nguy√™n import ban ƒë·∫ßu
import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import {
  Layout,
  Typography,
  Card,
  Row,
  Col,
  Button,
  Tag,
  Divider,
  Form,
  Select,
  Input,
  message,
} from "antd";
import { ArrowLeftOutlined } from "@ant-design/icons";

const { Content } = Layout;
const { Title, Text } = Typography;
const { Option } = Select;

// ‚úÖ Mapping cho c√°c b·∫£ng ph·ª•
const BIO_TYPE_MAP = {
  1: "Ph√¥i",
  2: "No√£n",
  3: "Tinh tr√πng",
};

const BIO_SAMPLE_STATUS = {
  1: "Ki·ªÉm tra ch·∫•t l∆∞·ª£ng",
  2: "ƒêang tr·ªØ",
  3: "ƒê√£ d√πng",
  4: "ƒê√£ h·ªßy",
};

const BIO_QUALITY_STATUS = {
  1: "T·ªët",
  2: "Kh√°",
  3: "Trung b√¨nh",
  4: "K√©m",
  5: "C√≥ th·ªÉ th·ª• tinh",
  6: "Kh√¥ng th·ªÉ th·ª• tinh",
  7: "C·∫ßn x·ª≠ l√Ω th√™m",
};

export default function BiosampleDetailPage() {
  const { id } = useParams(); // id = BS_ID
  const navigate = useNavigate();

  const [form] = Form.useForm();
  const [biosample, setBiosample] = useState(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    // üß™ Mock d·ªØ li·ªáu m·∫´u sinh h·ªçc
    const mockBiosample = {
      BS_ID: parseInt(id),
      TP_ID: 1,
      BT_ID: 1,
      BS_Name: "Ph√¥i AB",
      Status: 2,
      CollectionDate: "2025-07-09",
      StorageLocation: "T·ªß s·ªë 2 - NgƒÉn A3",
      BQS_ID: 5,
      Note: "M·∫´u ƒë·∫°t ch·∫•t l∆∞·ª£ng t·ªët, c√≥ th·ªÉ s·ª≠ d·ª•ng trong l·∫ßn chuy·ªÉn ph√¥i ti·∫øp theo.",
    };

    setBiosample(mockBiosample);
    form.setFieldsValue(mockBiosample);
  }, [id, form]);

  const handleSave = async () => {
    try {
      const values = await form.validateFields();
      setLoading(true);
      // üåÄ Gi·∫£ l·∫≠p API c·∫≠p nh·∫≠t
      await new Promise((res) => setTimeout(res, 1000));

      setBiosample((prev) => ({ ...prev, ...values }));
      message.success("C·∫≠p nh·∫≠t m·∫´u sinh h·ªçc th√†nh c√¥ng!");
    } catch (err) {
      message.error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin h·ª£p l·ªá.");
    } finally {
      setLoading(false);
    }
  };

  if (!biosample) return null;

  return (
    <Layout style={{ backgroundColor: "#F9FAFB", minHeight: "100vh" }}>
      <Content style={{ padding: 24 }}>
        <Button
          icon={<ArrowLeftOutlined />}
          style={{
            backgroundColor: "#f78db3",
            color: "white",
            border: "none",
            marginBottom: 24,
          }}
          onClick={() => navigate(-1)}
        >
          Quay l·∫°i
        </Button>

        <Title level={3} style={{ marginBottom: 4 }}>
          Chi ti·∫øt m·∫´u sinh h·ªçc (b√°c sƒ©)
        </Title>
        <Text type="secondary">M√£ h·ªì s∆° ƒëi·ªÅu tr·ªã: {biosample.TP_ID}</Text>

        <Card
          style={{ marginTop: 24, backgroundColor: "#fff0f5" }}
          title={<Text strong>Th√¥ng tin m·∫´u sinh h·ªçc</Text>}
          bordered={false}
        >
          <Form form={form} layout="vertical">
            <Row gutter={[16, 16]}>
              <Col span={12}>
                <Text strong>T√™n m·∫´u:</Text>
                <br />
                <Text>{biosample.BS_Name}</Text>
              </Col>
              <Col span={12}>
                <Text strong>Lo·∫°i m·∫´u:</Text>
                <br />
                <Tag color="purple">
                  {BIO_TYPE_MAP[biosample.BT_ID] || "Kh√¥ng x√°c ƒë·ªãnh"}
                </Tag>
              </Col>

              <Col span={12}>
                <Form.Item
                  name="Status"
                  label={<Text strong>Tr·∫°ng th√°i</Text>}
                  rules={[{ required: true, message: "Ch·ªçn tr·∫°ng th√°i" }]}
                >
                  <Select placeholder="Ch·ªçn tr·∫°ng th√°i">
                    {Object.entries(BIO_SAMPLE_STATUS).map(([key, label]) => (
                      <Option key={key} value={parseInt(key)}>
                        {label}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>

              <Col span={12}>
                <Form.Item
                  name="BQS_ID"
                  label={<Text strong>Ch·∫•t l∆∞·ª£ng</Text>}
                  rules={[{ required: true, message: "Ch·ªçn ch·∫•t l∆∞·ª£ng" }]}
                >
                  <Select placeholder="Ch·ªçn ch·∫•t l∆∞·ª£ng m·∫´u">
                    {Object.entries(BIO_QUALITY_STATUS).map(([key, label]) => (
                      <Option key={key} value={parseInt(key)}>
                        {label}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>

              <Col span={12}>
                <Text strong>Ng√†y thu th·∫≠p:</Text>
                <br />
                <Text>{biosample.CollectionDate}</Text>
              </Col>

              <Col span={12}>
                <Form.Item
                  name="StorageLocation"
                  label={<Text strong>V·ªã tr√≠ l∆∞u tr·ªØ</Text>}
                  rules={[{ required: true, message: "Nh·∫≠p v·ªã tr√≠ l∆∞u tr·ªØ" }]}
                >
                  <Input placeholder="V√≠ d·ª•: T·ªß A - NgƒÉn 2" />
                </Form.Item>
              </Col>

              <Col span={24}>
                <Form.Item name="Note" label={<Text strong>Ghi ch√∫</Text>}>
                  <Input.TextArea rows={3} placeholder="Ghi ch√∫ th√™m..." />
                </Form.Item>
              </Col>
            </Row>

            <Divider />

            <Row justify="end">
              <Col>
                <Button
                  type="primary"
                  loading={loading}
                  onClick={handleSave}
                  style={{ backgroundColor: "#f78db3", border: "none" }}
                >
                  L∆∞u thay ƒë·ªïi
                </Button>
              </Col>
            </Row>
          </Form>
        </Card>
      </Content>
    </Layout>
  );
}
