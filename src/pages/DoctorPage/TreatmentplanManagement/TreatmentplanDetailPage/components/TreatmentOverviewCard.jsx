import React, { useState } from "react";
import { Card, Row, Col, Typography, Tag, Select, Input, Button, message } from "antd";
import dayjs from "dayjs";

const { Text } = Typography;
const { Option } = Select;
const { TextArea } = Input;

const getStatusTag = (status) => {
  switch (status) {
    case 1: return <Tag color="blue">ƒêang ƒëi·ªÅu tr·ªã</Tag>;
    case 2: return <Tag color="green">ƒê√£ ho√†n th√†nh</Tag>;
    case 3: return <Tag color="red">ƒê√£ h·ªßy</Tag>;
    default: return <Tag>Kh√¥ng x√°c ƒë·ªãnh</Tag>;
  }
};

const SERVICE_OPTIONS = {
  1: "Kh√°m t·ªïng quan",
  2: "IVF",
  3: "IUI",
};

export default function TreatmentOverviewCard({ treatmentPlan, onUpdate }) {
  const [status, setStatus] = useState(treatmentPlan.Status);
  const [service, setService] = useState(treatmentPlan.service?.Ser_ID);
  const [note, setNote] = useState(treatmentPlan.Result);
  const [endDate, setEndDate] = useState(treatmentPlan.EndDate || null);
  const [isEditable, setIsEditable] = useState(true); // Cho ch·ªânh s·ª≠a ban ƒë·∫ßu

  const handleSave = () => {
    const updated = {
      ...treatmentPlan,
      Status: status,
      Ser_ID: service,
      Result: note,
      EndDate: (status === 2 || status === 3) ? dayjs().format("YYYY-MM-DD") : null,
    };

    if (updated.EndDate) {
      setEndDate(updated.EndDate);
    }

    message.success("C·∫≠p nh·∫≠t th√†nh c√¥ng (gi·∫£ l·∫≠p)");
    console.log("üìã D·ªØ li·ªáu c·∫≠p nh·∫≠t:", updated);

    // Sau khi c·∫≠p nh·∫≠t l√† ho√†n th√†nh ho·∫∑c h·ªßy ‚Üí kh√¥ng cho ch·ªânh n·ªØa
    if (status === 2 || status === 3) {
      setIsEditable(false);
    }

    if (onUpdate) onUpdate();
  };

  return (
    <Card
      title={<Text strong>T·ªïng quan h·ªì s∆° b·ªánh √°n</Text>}
      bodyStyle={{ backgroundColor: "#fff0f5" }}
      extra={
        isEditable && (
          <Button onClick={handleSave} style={{ backgroundColor: "#f78db3", color: "#fff", border: "none" }}>
            L∆∞u c·∫≠p nh·∫≠t
          </Button>
        )
      }
    >
      <Row gutter={[16, 16]}>
        <Col span={12}>
          <Text strong>Ng√†y b·∫Øt ƒë·∫ßu:</Text><br />
          <Text>{treatmentPlan.StartDate}</Text>
        </Col>

        {endDate && (
          <Col span={12}>
            <Text strong>Ng√†y k·∫øt th√∫c:</Text><br />
            <Text>{endDate}</Text>
          </Col>
        )}

        <Col span={12}>
          <Text strong>Tr·∫°ng th√°i:</Text><br />
          {isEditable ? (
            <Select value={status} onChange={setStatus} style={{ width: "100%" }}>
              <Option value={1}>ƒêang ƒëi·ªÅu tr·ªã</Option>
              <Option value={2}>ƒê√£ ho√†n th√†nh</Option>
              <Option value={3}>ƒê√£ h·ªßy</Option>
            </Select>
          ) : (
            getStatusTag(status)
          )}
        </Col>

        <Col span={24}>
          <Text strong>Ghi ch√∫:</Text><br />
          {isEditable ? (
            <TextArea rows={3} value={note} onChange={(e) => setNote(e.target.value)} />
          ) : (
            <Text>{note}</Text>
          )}
        </Col>

        <Col span={24}>
          <Text strong>D·ªãch v·ª• ƒëi·ªÅu tr·ªã:</Text><br />
          {isEditable ? (
            <Select value={service} onChange={setService} style={{ width: "100%" }}>
              {Object.entries(SERVICE_OPTIONS).map(([id, name]) => (
                <Option key={id} value={parseInt(id)}>{name}</Option>
              ))}
            </Select>
          ) : (
            <Text>{SERVICE_OPTIONS[service]}</Text>
          )}
        </Col>
      </Row>
    </Card>
  );
}
